Menu driven Program to fill any given polygon using scan-line area filing algorithm

#include<stdlib.h>
#include<stdio.h>
#include<gl/glut.h>
float x1,x2,x3,x4,y1,y2,y3,y4,x5,y5;
int le[500],re[500];
int i,y,value=0;
static int window;

void edge_detect(float x1,float y1,float x2,float y2,int *le,int *re)
{
	float mx,x,temp;
	int i;
	if((y2-y1)<0)
	{
		temp=y1;y1=y2;y2=temp;		// Swaps the values of y1 & y2
		temp=x1;x1=x2;x2=temp;		// Swaps the values of x1 & x2
	}
	if((y2-y1)!=0)
		mx=(x2-x1)/(y2-y1);
	else
		mx=x2-x1;
	x=x1;
	for(i=y1;i<=y2;i++)
	{
		if(x<(float) le[i])
			le[i]=(int) x;
		if(x>(float) re[i])
			re[i]=(int) x;
		x+=mx;
	}
}

void draw_pixel(int x,int y)
{
	
	glBegin(GL_POINTS);
	glVertex2i(x,y);				// Draws the vertex at co-ordinate (x,y)
	glEnd();
}






void scanfill(float x1,float y1,float x2,float y2,float x3,float y3,float x4,float y4,float x5,float y5)
{
	
	for(i=0;i<500;i++)
	{
		le[i]=500;
		re[i]=0;
	}
	edge_detect(x1,y1,x2,y2,le,re);		// Call to function ‘edge_detect()’
	edge_detect(x2,y2,x3,y3,le,re);
	edge_detect(x3,y3,x4,y4,le,re);
	edge_detect(x4,y4,x5,y5,le,re);
	edge_detect(x5,y5,x1,y1,le,re);
	for(y=0;y<500;y++)
	{
		if(le[y]<=re[y])
			for(i=(int) le[y];i<(int) re[y];i++)
				draw_pixel(i,y);		// Call to function ‘draw_pixel()’
	}
}
void drawpolygon()
{
	x1=250,y1=150,x2=150,y2=250,x3=250,y3=350,x4=350,y4=310,x5=350,y5=190;
	glClear(GL_COLOR_BUFFER_BIT);
	
	glBegin(GL_LINE_LOOP);
		glVertex2f(x1,y1);
		glVertex2f(x2,y2);
		glVertex2f(x3,y3);
		glVertex2f(x4,y4);
		glVertex2f(x5,y5);
	glEnd();
}
void display()
{
	if(value==1)
	{
		return;
	}
	else if(value==2)
	{
		glColor3f(1.0,0.0,0.0);
		drawpolygon();
		scanfill(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5);
		glFlush();
	}
	else if(value==3)
	{
		glColor3f(0.0,1.0,0.0);
		drawpolygon();
		scanfill(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5);
		glFlush();
	}
	else if(value==4)
	{
		glColor3f(0.0,0.0,1.0);
		drawpolygon();
		scanfill(x1,y1,x2,y2,x3,y3,x4,y4,x5,y5);
		glFlush();
	}
}
void menu(int num)
{
	if(num==0)
	{
		glutDestroyWindow(window);
		exit(0);
	}
	else
	{
		value=num;
	}
glutPostRedisplay();
}

voidcreatemenu()
{
	static int menu_id,submenu_id;
	submenu_id=glutCreateMenu(menu);
	glutAddMenuEntry(“RED”,2);
	glutAddMenuEntry(“GREEN”,3);
	glutAddMenuEntry(“BLUE”,4);

	menu_id=glutCreateMenu(menu);
	glutAddMenuEntry(“CLEAR”,1);

	glutAddSubMenu(“FILL”,submenu_id);
	glutAddMenuEntry(“QUIT”,0);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
}

void myinit()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0,500.0,0.0,500.0);
}

int main(int argc,char **argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
	glutInitWindowSize(500,500);
	glutInitWindowPosition(0,0);
	window=glutCreateWindow("Scan_Line Area Filling Algorithm");
	createmenu();
	glutDisplayFunc(display);
	myinit();
	glutMainLoop();
}
